@using PagedList.Mvc
@using PagedList
@model PagedList<ola.model.LotteryOpenHistory>

@{
    ViewBag.Title = "开奖号码";
}
@section css{
    <style type="text/css">
        td { text-align: center; }
    </style>
}
@*bg-green*@
<a class="button button-little" id="2" href="/Admin/LotteryOpenHistories/Index?lotteryId=2">山东11选5</a>
<a class="button button-little" id="3" href="/Admin/LotteryOpenHistories/Index?lotteryId=3">广东11选5</a>
<a class="button button-little" id="4" href="/Admin/LotteryOpenHistories/Index?lotteryId=4">上海11选5</a>
<table class="table">
    <tr>

        <th>
            期号
        </th>
        <th>
            开奖号码
        </th>
        <th>
            开奖时间
        </th>
        @*<th>
                获取时间
            </th>*@
        @*<th>
                来源
            </th>*@
        <th>
            预测1
        </th>
        <th>
            预测2
        </th>
        <th>
            预测3
        </th>
        <th>
            是否已经被匹配
        </th>
        <th>
            当期预测号码
        </th>
        @*<th>
                预测数据来源
            </th>
            <th>
                匹配期号
            </th>*@
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>

            <td>
                @Html.DisplayFor(modelItem => item.QiHao)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpenNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OpenTime)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.CreateTime)
                </td>*@

            @*<td>
                    @Html.DisplayFor(modelItem => item.Source)
                </td>*@
            <td>
                @FormatForecast(item.CurrentForecastNumber, item.Forecast1)
            </td>
            <td>
                @FormatForecast(item.CurrentForecastNumber, item.Forecast2)
            </td>
            <td>
                @FormatForecast(item.CurrentForecastNumber, item.Forecast3)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Used)
            </td>
            <td>
                @FormatForecastNumber(item.CurrentForecastNumber)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.ForecastFrom)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UsedBy)
                </td>*@
            @*<td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>*@
        </tr>
    }

</table>
<div class="pagedList" style="margin:0 auto;text-align:center">
    @Html.PagedListPager(Model, pageNumber => Url.Action("Index", new { pageNumber, lotteryId = ViewBag.lotteryId, qiHao = ViewBag.qiHao }), PagedListRenderOptions.ClassicPlusFirstAndLast)
</div>

@section scripts{
    <script type="text/javascript">
        $(function () {

            $('#@ViewBag.lotteryId').addClass('bg-green');
        });
    </script>


    <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>
    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        $(function () {
            var chat = $.connection.chatHub;
            chat.client.getNewOpenNumber = function (htmls) {
                window.location.reload();
            };
         
            $.connection.hub.start().done(function () {
                chat.server.joinGroup("@ViewBag.lotteryId");
            });
        });
    </script>
}

@helper  FormatForecastNumber(string currentForecastNumber)
{
    var CurrentForecastNumbers = currentForecastNumber.Replace(";", " | ").Split(',').ToList();
    CurrentForecastNumbers.RemoveAll(w => w == "");
    CurrentForecastNumbers = CurrentForecastNumbers.Distinct().ToList();
    @(string.Join(" ", CurrentForecastNumbers.Distinct()));
}

@helper  FormatForecast(string currentForecastNumber, string forecast)
{
    var CurrentForecastNumbers = currentForecastNumber.Replace(";", ",").Split(',').ToList();
    CurrentForecastNumbers.RemoveAll(w => w == "");
    CurrentForecastNumbers = CurrentForecastNumbers.Distinct().ToList();

    var result = "<label>--</label>";
    if (string.IsNullOrEmpty(forecast))
    {
        @Html.Raw(result);
        return;
    }
    var numbers = forecast.Split(',');
    result = "";
    foreach (var item in numbers)
    {
        if (CurrentForecastNumbers.Contains(item))
        {
            result += "<label style='color:red;'>" + item + " </label>";
        }
        else
        {
            result += item + " ";
        }
    }
    @Html.Raw(result);
}